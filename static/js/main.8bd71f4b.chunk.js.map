{"version":3,"sources":["DataLayer.js","Footer.js","SidebarOptions.js","spotify.js","Sidebar.js","Header.js","SongRow.js","Body.js","Player.js","Login.js","App.js","reportWebVitals.js","ServiceWorker.js","reducer.js","index.js"],"names":["DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Footer","spotify","item","token","playing","dispatch","useEffect","getMyCurrentPlaybackState","then","r","console","log","type","is_playing","handlePlayPause","pause","play","className","src","album","images","url","alt","name","artists","map","artist","join","onClick","skipToNext","getMyCurrentPlayingTrack","fontSize","skipToPrevious","Grid","container","spacing","xs","Slider","SidebarOptions","option","Icon","loginUrl","Sidebar","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","items","playlist","Header","user","placeholder","Avatar","display_name","SongRow","track","playSong","id","Body","discover_weekly","uris","res","description","context_uri","tracks","Player","Login","href","s","SpotifyWebApi","App","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getPlaylist","response","getMyTopArtists","top_artists","getMe","getUserPlaylists","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","state","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8bd71f4b.chunk.js","sourcesContent":["import React,{\r\n    createContext,\r\n    useContext,\r\n    useReducer\r\n} from 'react';\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({initialState,\r\nreducer,\r\nchildren})=>(\r\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </DataLayerContext.Provider>\r\n)\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React, { useEffect, useState } from \"react\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\r\nimport \"./Footer.css\";\r\nimport { Grid, Slider } from \"@material-ui/core\";\r\n\r\nfunction Footer({ spotify }) {\r\n  const [{ token, item, playing }, dispatch] = useDataLayerValue();\r\n\r\n  useEffect(() => {\r\n    spotify.getMyCurrentPlaybackState().then((r) => {\r\n      console.log(r);\r\n\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: r.is_playing,\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n    });\r\n  }, [spotify]);\r\n\r\n  const handlePlayPause = () => {\r\n    if (playing) {\r\n      spotify.pause();\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: false,\r\n      });\r\n    } else {\r\n      spotify.play();\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const skipNext = () => {\r\n    spotify.skipToNext();\r\n    spotify.getMyCurrentPlayingTrack().then((r) => {\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    });\r\n  };\r\n\r\n  const skipPrevious = () => {\r\n    spotify.skipToPrevious();\r\n    spotify.getMyCurrentPlayingTrack().then((r) => {\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer__left\">\r\n        <img\r\n          className=\"footer__albumLogo\"\r\n          src={item?.album.images[0].url}\r\n          alt={item?.name}\r\n        />\r\n        {item ? (\r\n          <div className=\"footer__songInfo\">\r\n            <h4>{item.name}</h4>\r\n            <p>{item.artists.map((artist) => artist.name).join(\", \")}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"footer__songInfo\">\r\n            <h4>No song is playing</h4>\r\n            <p>...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"footer__center\">\r\n        <ShuffleIcon className=\"footer__green\" />\r\n        <SkipPreviousIcon onClick={skipNext} className=\"footer__icon\" />\r\n        {playing ? (\r\n          <PauseCircleOutlineIcon\r\n            onClick={handlePlayPause}\r\n            fontSize=\"large\"\r\n            className=\"footer__icon\"\r\n          />\r\n        ) : (\r\n          <PlayCircleOutlineIcon\r\n            onClick={handlePlayPause}\r\n            fontSize=\"large\"\r\n            className=\"footer__icon\"\r\n          />\r\n        )}\r\n        <SkipNextIcon onClick={skipPrevious} className=\"footer__icon\" />\r\n        <RepeatIcon className=\"footer__green\" />\r\n      </div>\r\n      <div className=\"footer__right\">\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <PlaylistPlayIcon />\r\n          </Grid>\r\n          <Grid item>\r\n            <VolumeDownIcon />\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Slider aria-labelledby=\"continuous-slider\" />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './SidebarOption.css';\r\n\r\nfunction SidebarOptions({option = \"test\",Icon}) {\r\n    return (\r\n        <div className=\"sidebarOption\">\r\n            {Icon && <Icon className=\"option__icon\" ></Icon>}\r\n            {Icon ? <h4>{option}</h4>: <p>{option}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOptions\r\n","// https://developer.spotify.com/\r\n// documentation/web-playback-sdk/quick-start/#\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\nconst redirectUri = \"http://localhost:3000/\"\r\nconst clientId = \"e6b0283a0d3c4d7aab45ccf0f555fa10\";\r\n\r\nconst scopes = [\r\n    \"user-read-currently-playing\",\r\n    \"user-read-recently-played\",\r\n    \"user-read-playback-state\",\r\n    \"user-top-read\",\r\n    \"user-modify-playback-state\",\r\n];\r\n\r\nexport const getTokenFromResponse = () => {\r\n    return window.location.hash\r\n      .substring(1)\r\n      .split(\"&\")\r\n      .reduce((initial, item) => {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n  \r\n        return initial;\r\n      }, {});\r\n  };\r\n  \r\n\r\nexport const getToken =() => {\r\n    return window.location.hash.substring(1).split('&').reduce((initial,item) =>{\r\n        let parts = item.split('=');\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n\r\n        return initial;\r\n    }, {});\r\n}\r\n\r\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarOptions from \"./SidebarOptions\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport { getTokenFromResponse } from \"./spotify\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nfunction Sidebar() {\r\n  const [{ playlists }, dispatch] = useDataLayerValue();\r\n  console.log(playlists);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <img\r\n        className=\"sidebar__logo\"\r\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n        alt=\"\"\r\n      />\r\n      <SidebarOptions Icon={HomeIcon} option=\"Home\" />\r\n      <SidebarOptions Icon={SearchIcon} option=\"Search\" />\r\n      <SidebarOptions Icon={LibraryMusicIcon} option=\"Your Library\" />\r\n      <br />\r\n      <strong className=\"sidebar__title\">PLAYLISTS</strong>\r\n      <hr />\r\n      {playlists?.items?.map((playlist) => (\r\n        <SidebarOptions option={playlist.name} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react'\r\nimport './Header.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nfunction Header({spotify}) {\r\n    const [{user}, dispatch] = useDataLayerValue();\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__left\">\r\n                <SearchIcon />\r\n                <input\r\n                placeholder=\"Search for Artists, Songs, or Podcasts\" \r\n                type=\"text\"\r\n                />\r\n            </div>\r\n            <div className=\"header__right\">\r\n                <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\r\n                <h4>{user?.display_name}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport \"./SongRow.css\";\r\n\r\nfunction SongRow({track, playSong}) {\r\n    return (\r\n        <div className=\"songRow\" onClick={() => playSong(track.id)}>\r\n            <img \r\n            className=\"songRow__album\"\r\n            src={track.album.images[0].url}\r\n            alt=\"\" />\r\n            <div className=\"songRow__info\">\r\n                <h1>{track.name}</h1>\r\n                <p>\r\n                    {track.artists.map((artist) => artist.name).join(\", \")}\r\n                    {' '}\r\n                    {track.album.name}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongRow\r\n","import React from \"react\";\r\nimport \"./Body.css\";\r\nimport Header from \"./Header\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport SongRow from \"./SongRow\";\r\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\n\r\nfunction Body({ spotify }) {\r\n  const [{ discover_weekly }, dispatch] = useDataLayerValue();\r\n\r\n  const playPlaylist = (id) => {\r\n    spotify\r\n      .play({\r\n        context_uri: `spotify:playlist:37i9dQZEVXcJZyENOWUFo7`,\r\n      })\r\n      .then((res) => {\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n          dispatch({\r\n            type: \"SET_ITEM\",\r\n            item: r.item,\r\n          });\r\n          dispatch({\r\n            type: \"SET_PLAYING\",\r\n            playing: true,\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  const playSong = (id) => {\r\n    spotify\r\n      .play({\r\n        uris: [`spotify:track:${id}`],\r\n      })\r\n      .then((res) => {\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n          dispatch({\r\n            type: \"SET_ITEM\",\r\n            item: r.item,\r\n          });\r\n          dispatch({\r\n            type: \"SET_PLAYING\",\r\n            playing: true,\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <Header spotify={spotify} />\r\n\r\n      <div className=\"body__info\">\r\n        <img src={discover_weekly?.images[0].url} alt=\"\" />\r\n        <div className=\"body__infoText\">\r\n          <strong>PLAYLIST</strong>\r\n          <h2>Discover Weekly</h2>\r\n          <p>{discover_weekly?.description}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"body__songs\">\r\n        <div className=\"body__icons\">\r\n          <PlayCircleFilledIcon\r\n            className=\"body__shuffle\"\r\n            onClick={playPlaylist}\r\n          />\r\n          <FavoriteIcon fontSize=\"large\" />\r\n          <MoreHorizIcon />\r\n        </div>\r\n\r\n        {discover_weekly?.tracks.items.map((item) => (\r\n          <SongRow playSong={playSong} track={item.track} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;","import React from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport \"./Player.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Body from \"./Body\";\r\n\r\nfunction Player({ spotify }) {\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"player__body\">\r\n        <Sidebar />\r\n        <Body spotify={spotify} />\r\n      </div>\r\n      <Footer spotify={spotify} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport { loginUrl } from './spotify';\r\nimport \"./Login.css\"\r\n\r\nfunction Login() {\r\n    return (\r\n        <div className='login'>\r\n             {/* Spotify Logo */}\r\n        <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\" />\r\n    {/* Login with spotify button */}\r\n    <a href={loginUrl}>LOGIN WITH SPOTIFY</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\nimport Player from \"./Player\";\nimport { getTokenFromResponse } from \"./spotify\";\nimport \"./App.css\";\nimport Login from \"./Login\";\n\nconst s = new SpotifyWebApi();\n\nfunction App() {\n  const [{ token }, dispatch] = useDataLayerValue();\n\n  useEffect(() => {\n    // Set token\n    const hash = getTokenFromResponse();\n    window.location.hash = \"\";\n    let _token = hash.access_token;\n\n    if (_token) {\n      s.setAccessToken(_token);\n\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      });\n\n      s.getPlaylist(\"37i9dQZEVXcJZyENOWUFo7\").then((response) =>\n        dispatch({\n          type: \"SET_DISCOVER_WEEKLY\",\n          discover_weekly: response,\n        })\n      );\n\n      s.getMyTopArtists().then((response) =>\n        dispatch({\n          type: \"SET_TOP_ARTISTS\",\n          top_artists: response,\n        })\n      );\n\n      dispatch({\n        type: \"SET_SPOTIFY\",\n        spotify: s,\n      });\n\n      s.getMe().then((user) => {\n        dispatch({\n          type: \"SET_USER\",\n          user,\n        });\n      });\n\n      s.getUserPlaylists().then((playlists) => {\n        dispatch({\n          type: \"SET_PLAYLISTS\",\n          playlists,\n        });\n      });\n    }\n  }, [token, dispatch]);\n\n  return (\n    <div className=\"app\">\n      {!token && <Login />}\n      {token && <Player spotify={s} />}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import { findAllByDisplayValue } from \"@testing-library/react\";\r\n\r\nexport const initialState = {\r\n  user: null,\r\n  playlists: [],\r\n  spotify: null,\r\n  discover_weekly: null,\r\n  top_artists: null,\r\n  playing: false,\r\n  item: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    case \"SET_PLAYING\":\r\n      return {\r\n        ...state,\r\n        playing: action.playing,\r\n      };\r\n\r\n    case \"SET_ITEM\":\r\n      return {\r\n        ...state,\r\n        item: action.item,\r\n      };\r\n\r\n    case \"SET_DISCOVER_WEEKLY\":\r\n      return {\r\n        ...state,\r\n        discover_weekly: action.discover_weekly,\r\n      };\r\n\r\n    case \"SET_TOP_ARTISTS\":\r\n      return {\r\n        ...state,\r\n        top_artists: action.top_artists,\r\n      };\r\n\r\n    case \"SET_TOKEN\":\r\n      return {\r\n        ...state,\r\n        token: action.token,\r\n      };\r\n\r\n    case \"SET_SPOTIFY\":\r\n      return {\r\n        ...state,\r\n        spotify: action.spotify,\r\n      };\r\n\r\n    case \"SET_PLAYLISTS\":\r\n      return {\r\n        ...state,\r\n        playlists: action.playlists,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {DataLayer} from \"./DataLayer\";\nimport * as serviceWorker from \"./ServiceWorker\"; \nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n    <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}